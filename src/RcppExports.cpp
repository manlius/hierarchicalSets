// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// splinePath
NumericMatrix splinePath(NumericVector x, NumericVector y, int degree, std::vector<double> knots, int detail);
RcppExport SEXP hierarchicalSets_splinePath(SEXP xSEXP, SEXP ySEXP, SEXP degreeSEXP, SEXP knotsSEXP, SEXP detailSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type detail(detailSEXP);
    __result = Rcpp::wrap(splinePath(x, y, degree, knots, detail));
    return __result;
END_RCPP
}
// getSplines
List getSplines(NumericVector x, NumericVector y, IntegerVector id, int detail);
RcppExport SEXP hierarchicalSets_getSplines(SEXP xSEXP, SEXP ySEXP, SEXP idSEXP, SEXP detailSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type detail(detailSEXP);
    __result = Rcpp::wrap(getSplines(x, y, id, detail));
    return __result;
END_RCPP
}
// setClustering
List setClustering(IntegerVector P, IntegerVector I, CharacterVector setNames, double threshold);
RcppExport SEXP hierarchicalSets_setClustering(SEXP PSEXP, SEXP ISEXP, SEXP setNamesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type setNames(setNamesSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    __result = Rcpp::wrap(setClustering(P, I, setNames, threshold));
    return __result;
END_RCPP
}
// pairSummary
DataFrame pairSummary(IntegerVector P, IntegerVector I, IntegerVector order);
RcppExport SEXP hierarchicalSets_pairSummary(SEXP PSEXP, SEXP ISEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type order(orderSEXP);
    __result = Rcpp::wrap(pairSummary(P, I, order));
    return __result;
END_RCPP
}
// getOutliers
List getOutliers(List clusters, IntegerVector P, IntegerVector I, bool count);
RcppExport SEXP hierarchicalSets_getOutliers(SEXP clustersSEXP, SEXP PSEXP, SEXP ISEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I(ISEXP);
    Rcpp::traits::input_parameter< bool >::type count(countSEXP);
    __result = Rcpp::wrap(getOutliers(clusters, P, I, count));
    return __result;
END_RCPP
}
